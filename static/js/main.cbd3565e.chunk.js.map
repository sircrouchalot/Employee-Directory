{"version":3,"sources":["components/EmployeeTable.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeTable","props","employees","React","useState","sortedField","setSortedField","sortableEmployees","useMemo","sortedEmployees","sort","a","b","className","scope","type","onClick","map","employee","key","id","name","email","department","manager","NavBar","App","employeeList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAsEeA,MApEf,SAAuBC,GAAQ,IACrBC,EAAcD,EAAdC,UADoB,EAEUC,IAAMC,SAAS,MAFzB,mBAErBC,EAFqB,KAERC,EAFQ,KAItBC,EAAoBJ,IAAMK,SAAQ,WACtC,IAAIC,EAAe,YAAOP,GAY1B,OAXoB,OAAhBG,GACAI,EAAgBC,MAAK,SAACC,EAAGC,GACzB,OAAID,EAAEN,GAAeO,EAAEP,GACd,EACEM,EAAEN,GAAeO,EAAEP,IACpB,EAED,KAINI,IACN,CAACP,EAAWG,IAGf,OACE,2BAAOQ,UAAU,SACf,8CACA,2BAAOA,UAAU,cACf,4BACA,wBAAIC,MAAM,OACN,4BAAQC,KAAK,SAASF,UAAU,oBAAoBG,QAAS,kBAAMV,EAAe,QAAlF,OAIF,wBAAIQ,MAAM,OACR,4BAAQC,KAAK,SAASF,UAAU,oBAAoBG,QAAS,kBAAMV,EAAe,UAAlF,SAIF,wBAAIQ,MAAM,OACR,4BAAQC,KAAK,SAASF,UAAU,oBAAoBG,QAAS,kBAAMV,EAAe,WAAlF,UAIF,wBAAIQ,MAAM,OACR,4BAAQC,KAAK,SAASF,UAAU,oBAAoBG,QAAS,kBAAMV,EAAe,gBAAlF,eAIF,wBAAIQ,MAAM,OACR,4BAAQC,KAAK,SAASF,UAAU,oBAAoBG,QAAS,kBAAMV,EAAe,aAAlF,cAMN,+BACGC,EAAkBU,KAAI,SAACC,GAAD,OACrB,wBAAIC,IAAKD,EAASE,IAChB,4BAAKF,EAASE,IACd,4BAAKF,EAASG,MACd,4BAAKH,EAASI,OACd,4BAAKJ,EAASK,YACd,4BAAKL,EAASM,gBCnDXC,MATf,SAAgBxB,GAEZ,OACE,yBAAKY,UAAU,gCACb,0BAAMA,UAAU,wBAAhB,wBCgDOa,MA/Cf,WACE,IAAIC,EAAe,CACjB,CACEP,GAAI,EACJC,KAAM,cACNC,MAAO,sBACPC,WAAY,cACZC,QAAS,mBAEX,CACEJ,GAAI,EACJC,KAAM,kBACNC,MAAO,qBACPC,WAAY,cACZC,QAAS,mBAEX,CACEJ,GAAI,EACJC,KAAM,gBACNC,MAAO,mBACPC,WAAY,QACZC,QAAS,kBAEX,CACEJ,GAAI,EACJC,KAAM,iBACNC,MAAO,sBACPC,WAAY,QACZC,QAAS,kBAEX,CACEJ,GAAI,EACJC,KAAM,UACNC,MAAO,kBACPC,WAAY,WACZC,QAAS,oBAIb,OACE,yBAAKX,UAAU,yBACb,kBAAC,EAAD,CAAQX,UAAWyB,IACnB,kBAAC,EAAD,CAAezB,UAAWyB,MCrCZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cbd3565e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction EmployeeTable(props) {\r\n  const { employees } = props;\r\n  const [sortedField, setSortedField] = React.useState(null);\r\n\r\n  const sortableEmployees = React.useMemo(() => {\r\n    let sortedEmployees = [...employees];\r\n    if (sortedField !== null) {\r\n        sortedEmployees.sort((a, b) => {\r\n        if (a[sortedField] > b[sortedField]) {\r\n          return 1;\r\n        } else if (a[sortedField] < b[sortedField]) {\r\n          return -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n    return sortedEmployees;\r\n  }, [employees, sortedField]);\r\n\r\n\r\n  return (\r\n    <table className=\"table\">\r\n      <caption>Employees</caption>\r\n      <thead className=\"thead-dark\">\r\n        <tr>\r\n        <th scope=\"col\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setSortedField(\"id\")}>\r\n              ID\r\n            </button>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setSortedField(\"name\")}>\r\n              Name\r\n            </button>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setSortedField(\"email\")}>\r\n              Email\r\n            </button>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setSortedField(\"department\")}>\r\n              Department\r\n            </button>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setSortedField(\"manager\")}>\r\n              Manager\r\n            </button>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {sortableEmployees.map((employee) => (\r\n          <tr key={employee.id}>\r\n            <td>{employee.id}</td> \r\n            <td>{employee.name}</td>\r\n            <td>{employee.email}</td>\r\n            <td>{employee.department}</td>\r\n            <td>{employee.manager}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from 'react';\r\n\r\nfunction NavBar(props) {\r\n\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\nimport \"./App.css\";\n\nimport EmployeeTable from \"./components/EmployeeTable\";\nimport NavBar from \"./components/NavBar\";\n\n\nfunction App() {\n  var employeeList = [\n    {\n      id: 1,\n      name: \"Alex Crouch\",\n      email: \"acrouch06@gmail.com\",\n      department: \"Engineering\",\n      manager: \"Ashley Chambers\",\n    },\n    {\n      id: 2,\n      name: \"Ashley Chambers\",\n      email: \"ashley@example.com\",\n      department: \"Engineering\",\n      manager: \"John Williamson\",\n    },\n    {\n      id: 3,\n      name: \"Gregory Block\",\n      email: \"greg@example.com\",\n      department: \"Sales\",\n      manager: \"Hannah Shirley\",\n    },\n    {\n      id: 4,\n      name: \"Hannah Shirley\",\n      email: \"acrouch06@gmail.com\",\n      department: \"Sales\",\n      manager: \"Megan Davidson\",\n    },\n    {\n      id: 5,\n      name: \"Joe Doe\",\n      email: \"joe@example.com\",\n      department: \"Engineer\",\n      manager: \"Ashley Chambers\",\n    },\n  ];\n\n  return (\n    <div className=\"container text-center\">\n      <NavBar employees={employeeList} />\n      <EmployeeTable employees={employeeList} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}